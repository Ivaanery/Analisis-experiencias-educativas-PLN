import numpy as np
import pandas as pd
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense, Bidirectional
import nltk
from nltk.corpus import stopwords
import string

# Descargar los recursos de NLTK (si no los tienes)
nltk.download('stopwords')

# Cargar el archivo de texto (reemplaza 'archivo.txt' por tu archivo)
with open('archivo.txt', 'r') as file:
    data = file.readlines()

# Preprocesamiento de texto
stop_words = set(stopwords.words('english'))
punctuation = set(string.punctuation)

def preprocess_text(text):
    text = text.lower()  # Convertir a minúsculas
    text = ''.join([word for word in text if word not in punctuation])  # Eliminar signos de puntuación
    text = ' '.join([word for word in text.split() if word not in stop_words])  # Eliminar stopwords
    return text

# Dividir los datos en características (X) y etiquetas (y)
texts = [preprocess_text(sentence) for sentence in data]
labels = [your_sentiment_labels]  # Reemplaza 'your_sentiment_labels' con las etiquetas reales

# Convertir etiquetas a valores numéricos usando LabelEncoder
label_encoder = LabelEncoder()
encoded_labels = label_encoder.fit_transform(labels)

# Tokenización y secuenciación de texto
tokenizer = Tokenizer(num_words=10000, oov_token='<OOV>')
tokenizer.fit_on_texts(texts)
sequences = tokenizer.texts_to_sequences(texts)
padded_sequences = pad_sequences(sequences, maxlen=100, padding='post', truncating='post')

# División de datos en conjuntos de entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(padded_sequences, encoded_labels, test_size=0.2, random_state=42)

# Construir el modelo de red neuronal
model = Sequential([
    Embedding(10000, 16, input_length=100),
    Bidirectional(LSTM(64)),
    Dense(64, activation='relu'),
    Dense(3, activation='softmax')  # 3 clases de polaridad: positiva, negativa, neutra
])

# Compilar el modelo
model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

# Entrenar el modelo
model.fit(X_train, y_train, epochs=5, batch_size=64, validation_data=(X_test, y_test))

# Evaluar el modelo
loss, accuracy = model.evaluate(X_test, y_test)
print(f'Accuracy: {accuracy}')
